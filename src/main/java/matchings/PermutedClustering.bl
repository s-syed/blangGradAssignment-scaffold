package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
  
  laws {
  	
//  	Initialize means
  	means.get(0) ~ ContinuousUniform(0,1)
  	for (int j : 1 ..< groupSize){
  		means.get(j) | RealVar mean_last = means.get(j-1) ~ ContinuousUniform(mean_last, mean_last + 1) 
  	}
  	
//  	Initialize Variances
    for (int j : 0 ..< groupSize){
  		variances.get(j) ~ Exponential(10) 
  	}
  	
//  	Initialize permutaitons
	for (int i : 0 ..< nGroups){
  		permutations.get(i) ~ UniformPermutation() }
  	
  	for (int i : 0 ..< nGroups){
  		for (int j : 0 ..< groupSize){
  			observations.getRealVar(i,j) | means, variances,
  				int perm = permutations.get(i).getConnections().get(j)
  			~ Normal(means.get(perm), variances.get(perm))
  		}
  	}
  }
}
